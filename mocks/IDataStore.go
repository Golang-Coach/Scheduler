// Code generated by mockery v1.0.0
package mocks

import "github.com/stretchr/testify/mock"
import "github.com/Golang-Coach/Scheduler/models"

// IDataStore is an autogenerated mock type for the IDataStore type
type IDataStore struct {
	mock.Mock
}

// AddPackage provides a mock function with given fields: repositoryInfo
func (_m *IDataStore) AddPackage(repositoryInfo models.RepositoryInfo) error {
	ret := _m.Called(repositoryInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.RepositoryInfo) error); ok {
		r0 = rf(repositoryInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPackage provides a mock function with given fields: query
func (_m *IDataStore) FindPackage(query interface{}) (*models.RepositoryInfo, error) {
	ret := _m.Called(query)

	var r0 *models.RepositoryInfo
	if rf, ok := ret.Get(0).(func(interface{}) *models.RepositoryInfo); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RepositoryInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPackageWithinLimit provides a mock function with given fields: query, skip, limit
func (_m *IDataStore) FindPackageWithinLimit(query interface{}, skip int, limit int) (*[]models.RepositoryInfo, error) {
	ret := _m.Called(query, skip, limit)

	var r0 *[]models.RepositoryInfo
	if rf, ok := ret.Get(0).(func(interface{}, int, int) *[]models.RepositoryInfo); ok {
		r0 = rf(query, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.RepositoryInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, int, int) error); ok {
		r1 = rf(query, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: pack
func (_m *IDataStore) UpdatePackage(pack *models.RepositoryInfo) error {
	ret := _m.Called(pack)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.RepositoryInfo) error); ok {
		r0 = rf(pack)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
